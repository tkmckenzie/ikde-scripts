data(lm.generated)
X <- lm.generated$X
y <- lm.generated$y
library(ikde)
data(lm.generated)
X <- lm.generated$X
y <- lm.generated$y
data <- list(N = list("int<lower=1>", nrow(X)),
k = list("int<lower=1>", ncol(X)),
X = list("matrix[N, k]", X),
y = list("vector[N]", y))
parameters <- list(beta = "vector[k]",
sigma_sq = "real<lower=0>")
model <- list(priors = c("beta ~ normal(0, 10)",
"sigma_sq ~ inv_gamma(1, 1)"),
likelihood = c("y ~ normal(X * beta, sqrt(sigma_sq))"))
ikde.model <- define.model(data, parameters, model)
# Only an estimation, may not exactly match presented result
if (class(ikde.model) != "ikde.model") stop("ikde.model must be of class \"ikde.model\".")
if (!ikde.model$built) ikde.model <- build.model(ikde.model)
#First fit the model
stan.fit <- fit.model(ikde.model, burn.iter, sample.iter, 1, control, refresh, display.output)
burn.iter = 1000
sample.iter = 1000
control = NULL
refresh = NULL
display.output = FALSE
show.trace = FALSE
#First fit the model
stan.fit <- fit.model(ikde.model, burn.iter, sample.iter, 1, control, refresh, display.output)
stan.extract <- rstan::extract(stan.fit)
num.paramters <- length(stan.extract) - 1
eval.point <- list()
length(stan.extract)
#Form proposal distributions
num.parameters <- length(ikde.model$parameters)
ikde.model$parameters$beta
parameter <- names(ikde.model$parameters)[parameter.num]
parameter.type <- ikde.model$parameters[[parameter]]
#Form proposal distributions
num.parameters <- length(ikde.model$parameters)
parameter.num = 1
parameter <- names(ikde.model$parameters)[parameter.num]
parameter.type <- ikde.model$parameters[[parameter]]
parameter.type <- gsub(" ", "", parameter.type)
parameter.restriction.pos <- gregexpr("<[0-9A-Za-z\\.,\\*/\\+-\\^_=]+>", parameter.type)[[1]]
parameter.restriction <- substr(parameter.type, as.numeric(parameter.restriction.pos), as.numeric(parameter.restriction.pos) + attr(parameter.restriction.pos, "match.length") - 1)
parameter = "vector<lower = 0, upper = 15>[N]"
parameter.type <- ikde.model$parameters[[parameter]]
parameter.type <- gsub(" ", "", parameter.type)
parameter.restriction.pos <- gregexpr("<[0-9A-Za-z\\.,\\*/\\+-\\^_=]+>", parameter.type)[[1]]
gregexpr("<[0-9A-Za-z\\.,\\*/\\+-\\^_=]+>", parameter.type)
parameter.type
parameter
parameter.type = "vector<lower = 0, upper = 15>[N]"
parameter.type <- gsub(" ", "", parameter.type)
parameter.restriction.pos <- gregexpr("<[0-9A-Za-z\\.,\\*/\\+-\\^_=]+>", parameter.type)[[1]]
parameter.restriction <- substr(parameter.type, as.numeric(parameter.restriction.pos), as.numeric(parameter.restriction.pos) + attr(parameter.restriction.pos, "match.length") - 1)
parameter.restriction
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=,)", parameter.restriction)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=,)", parameter.restriction, perl = TRUE)
lower.limit.pos
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=,)", parameter.restriction, perl = TRUE)
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
parameter.restriction
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=,)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit
lower.limit <- evaluate.expression(lower.limit, ikde.model = ikde.model)
lower.limit
names(ikde.model$data)
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=,)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
upper.limit
upper.limit.pos
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=(,>){1, 1}", parameter.restriction, perl = TRUE)[[1]]
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=(,>){1, 1})", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
upper.limit.pos
parameter.restriction
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=[,>]{1, 1})", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=[,>]{1, 2})", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
grepl("a{1, 2}", "a")
grepl("a\\{1, 2\\}", "a")
grepl("a{1, 2}", "a")
grepl("a{1, 2}", "a", perl = TRUE)
grepl("[a]{1, 2}", "a", perl = TRUE)
grepl("[a]{1, 2}", "a")
grepl("[a]{1, 2}", "a", perl = TRUE)
grepl("[a]{0, 2}", "a", perl = TRUE)
grepl("[a]{1, 2}", "a", perl = TRUE)
grepl("(a){1, 2}", "a", perl = TRUE)
grepl("a{1}", "a", perl = TRUE)
grepl("a{1,2}", "a", perl = TRUE)
grepl("a{1,2}", "aa", perl = TRUE)
grepl("a{1,2}", "aaa", perl = TRUE)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit <- evaluate.expression(lower.limit, ikde.model = ikde.model)
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_=]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit <- evaluate.expression(lower.limit, ikde.model = ikde.model)
lower.limit
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+(?=[,>]+)(?!upper=)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+(?=[,>]+)(?!,upper=)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+(?!,upper=)(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+(?!(,upper=))(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+(?![(,upper=)]+)(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
parameter.restriction
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+(?=[,\\>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
parameter.restriction
gregexpr("<[0-9A-Za-z\\.,\\*/\\+-\\^_=]+>", parameter.type)[[1]]
gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
gregexpr("(?<=lower=)[0-9A-Za-z\\*/\\+-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+", parameter.restriction, perl = TRUE)[[1]]
gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+-\\^_]+", parameter.restriction, perl = TRUE)
gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+", parameter.restriction, perl = TRUE)[[1]]
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit <- evaluate.expression(lower.limit, ikde.model = ikde.model)
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
parameter.type = "vector<lower = 0, upper = N * k>[N]"
parameter <- names(ikde.model$parameters)[parameter.num]
parameter.type <- ikde.model$parameters[[parameter]]
parameter.type <- gsub(" ", "", parameter.type)
parameter.restriction.pos <- gregexpr("<[0-9A-Za-z\\.,\\*/\\+\\-\\^_=]+>", parameter.type)[[1]]
parameter.restriction <- substr(parameter.type, as.numeric(parameter.restriction.pos), as.numeric(parameter.restriction.pos) + attr(parameter.restriction.pos, "match.length") - 1)
parameter.restriction
parameter.type
parameter.type = "vector<lower = 0, upper = N * k>[N]"
parameter.type <- gsub(" ", "", parameter.type)
parameter.restriction.pos <- gregexpr("<[0-9A-Za-z\\.,\\*/\\+\\-\\^_=]+>", parameter.type)[[1]]
parameter.restriction <- substr(parameter.type, as.numeric(parameter.restriction.pos), as.numeric(parameter.restriction.pos) + attr(parameter.restriction.pos, "match.length") - 1)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
lower.limit <- evaluate.expression(lower.limit, ikde.model = ikde.model)
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
for (data.var in names(ikde.model$data)){
lower.limit <- gsub(data.var, paste0("ikde.model$data$", data.var, "[[2]]"), lower.limit)
}
lower.limit <- evaluate.expression(lower.limit, ikde.model = ikde.model)
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
for (data.var in names(ikde.model$data)){
upper.limit <- gsub(data.var, paste0("ikde.model$data$", data.var, "[[2]]"), upper.limit)
}
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
upper.limit
names(ikde.model$data)
for (data.var in names(ikde.model$data)){
upper.limit <- gsub(data.var, paste0("ikde.model$data$", data.var, "[[2]]"), upper.limit)
}
upper.limit
f = function(...){
dots <- list(...)
print(names(dots))
}
a = 1, b = list(1, 2, 3)
a = 1
b = list(1, 2, 3)
f(a, b)
f = function(...){
dots <- list(...)
print(names(dots))
print(dots)
}
f(a, b)
f(a = a, b)
unique(c(1, 1, 2,3 ))
3.15 * 5 / 3.5
3.15 / 3.5
ikde.model$data
names(ikde.model$data)
arg.values = c("N", "N*k")
data.var = "N"
regex <- paste0("(?<![0-9A-Za-z\\.]+)", data.var, "(?![0-9A-Za-z\\.]+)")
gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
regex
regex <- paste0("(?<![0-9A-Za-z]+)", data.var, "(?![0-9A-Za-z]+)")
gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
regex <- paste0("(?<![0-9A-Za-z]+)", data.var)
gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
regex <- paste0("(?<!ABC)", data.var)
gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
regex <- paste0(data.var, "(?![0-9A-Za-z]+)")
gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
regex <- paste0(data.var, "(?![0-9A-Za-z\\.\\$]+)")
gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
6.15 * 36 / 4
3.15 * 36 / 2
0.7 * 0.194 + 0.3 * 0.212
0.7 * 0.105 + 0.3 * 0.114
0.1994 * 10 + 0.1077 * 6
2.6402 * 75 / 5
2.6402 * 75 / 4
regex <- paste0("(?<![0-9A-Za-z]{1})", data.var, "(?![0-9A-Za-z\\.]+)")
arg.values <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
arg.values
arg.values <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
arg.values
arg.values = c("N", "N*k")
data.var = "N"
regex <- paste0("(?<![0-9A-Za-z\\.\\$]{1})", data.var, "(?![0-9A-Za-z\\.\\$]+)")
arg.values <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
arg.values
arg.values <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
arg.values
data.var = "k"
regex <- paste0("(?<![0-9A-Za-z\\.\\$]{1})", data.var, "(?![0-9A-Za-z\\.\\$]+)")
arg.values <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
arg.values
arg.values = "N_test*N"
data.var = "N"
regex <- paste0("(?<![0-9A-Za-z\\.\\$\\_]{1})", data.var, "(?![0-9A-Za-z\\.\\$\\_]{1})")
arg.values <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
arg.values
arg.values = "N_test*N"
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
arg.values <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), arg.values, perl = TRUE)
arg.values
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
rm(list = ls())
library(ikde)
data(lm.generated)
X <- lm.generated$X
y <- lm.generated$y
data <- list(N = list("int<lower=1>", nrow(X)),
k = list("int<lower=1>", ncol(X)),
X = list("matrix[N, k]", X),
y = list("vector[N]", y))
parameters <- list(beta = "vector[k]",
sigma_sq = "real<lower=0>")
model <- list(priors = c("beta ~ normal(0, 10)",
"sigma_sq ~ inv_gamma(1, 1)"),
likelihood = c("y ~ normal(X * beta, sqrt(sigma_sq))"))
ikde.model <- define.model(data, parameters, model)
burn.iter = 1000
sample.iter = 1000
control = NULL
refresh = NULL
display.output = FALSE
show.trace = FALSE
parameter.num = 1
parameter.type = "vector<lower = 0, upper = N * k>[N]"
if (class(ikde.model) != "ikde.model") stop("ikde.model must be of class \"ikde.model\".")
if (!ikde.model$built) ikde.model <- build.model(ikde.model)
#First fit the model
stan.fit <- fit.model(ikde.model, burn.iter, sample.iter, 1, control, refresh, display.output)
stan.extract <- rstan::extract(stan.fit)
num.paramters <- length(stan.extract) - 1
eval.point <- list()
for (parameter.name in names(stan.extract)[-(num.paramters + 1)]){
if (length(dim(stan.extract[[parameter.name]])) == 1){
eval.point[[parameter.name]] <- mean(stan.extract[[parameter.name]])
} else if (length(dim(stan.extract[[parameter.name]])) == 2){
eval.point[[parameter.name]] <- apply(stan.extract[[parameter.name]], 2, mean)
} else{
stop("ikde currently only supports 0- and 1-dimensional parameters.")
}
}
parameter.type <- gsub(" ", "", parameter.type)
parameter.restriction.pos <- gregexpr("<[0-9A-Za-z\\.,\\*/\\+\\-\\^_=]+>", parameter.type)[[1]]
parameter.restriction <- substr(parameter.type, as.numeric(parameter.restriction.pos), as.numeric(parameter.restriction.pos) + attr(parameter.restriction.pos, "match.length") - 1)
lower.limit.pos <- gregexpr("(?<=lower=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
lower.limit <- substr(parameter.restriction, as.numeric(lower.limit.pos), as.numeric(lower.limit.pos) + attr(lower.limit.pos, "match.length") - 1)
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data,var, "(?![0-9A-Za-z\\.\\$_]{1})")
lower.limit <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), lower.limit)
}
data.var
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data,var, "(?![0-9A-Za-z\\.\\$_]{1})")
paste0("a", data.var, "b")
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
lower.limit <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), lower.limit)
}
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
lower.limit <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), lower.limit, perl = TRUE)
}
lower.limit
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data,var, "(?![0-9A-Za-z\\.\\$_]{1})")
upper.limit <- gsub(data.var, paste0("ikde.model$data$", data.var, "[[2]]"), upper.limit, perl = TRUE)
}
lower.limit <- evaluate.expression(lower.limit, ikde.model = ikde.model)
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
upper.limit <- gsub(data.var, paste0("ikde.model$data$", data.var, "[[2]]"), upper.limit, perl = TRUE)
}
upper.limit
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
data.var = "N"
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
upper.limit <- gsub(data.var, paste0("ikde.model$data$", data.var, "[[2]]"), upper.limit, perl = TRUE)
upper.limit
data.var = "k"
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
gsub(data.var, paste0("ikde.model$data$", data.var, "[[2]]"), upper.limit, perl = TRUE)
upper.limit.pos <- gregexpr("(?<=upper=)[0-9A-Za-z\\.\\*/\\+\\-\\^_]+(?=[,>]+)", parameter.restriction, perl = TRUE)[[1]]
upper.limit <- substr(parameter.restriction, as.numeric(upper.limit.pos), as.numeric(upper.limit.pos) + attr(upper.limit.pos, "match.length") - 1)
for (data.var in names(ikde.model$data)){
regex <- paste0("(?<![0-9A-Za-z\\.\\$_]{1})", data.var, "(?![0-9A-Za-z\\.\\$_]{1})")
upper.limit <- gsub(regex, paste0("ikde.model$data$", data.var, "[[2]]"), upper.limit, perl = TRUE)
}
upper.limit
upper.limit <- evaluate.expression(upper.limit, ikde.model = ikde.model)
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
library(ikde)
rm(list = ls())
x <- seq(-5, 5, length.out = 100)
sigmoid.result <- sigmoid(x)
plot(sigmoid.result$value ~ x, type = "l")
plot(sigmoid.result$gradient ~ x, type = "l")
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/1_document.R', echo=TRUE)
source('~/git/ikde-scripts/2_reinstall.R', echo=TRUE)
library(ikde)
x <- seq(0.005, 0.995, length.out = 100)
sigmoid.inv.result <- sigmoid.inv(x)
plot(sigmoid.inv.result$value ~ x, type = "l")
plot(sigmoid.inv.result$gradient ~ x, type = "l")
926 + 2835
41836 + 85673
178+1518+
0
9751+28077
7443+488
65473+5684
2392+504+4529
66300+22776+85418
