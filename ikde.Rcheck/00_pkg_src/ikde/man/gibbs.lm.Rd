% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gibbs.lm.R
\name{gibbs.lm}
\alias{gibbs.lm}
\title{Linear model Gibbs sampling}
\usage{
gibbs.lm(X, y, priors = list(), burn.iter = 1000, sample.iter = 1000)
}
\arguments{
\item{X}{Matrix of input variables}

\item{y}{Vector of output variables}

\item{priors}{A named list of parameter priors; should include beta.prior.mean (vector), beta.prior.var (matrix), sigma.sq.prior.shape (scalar), and sigma.sq.prior.rate (scalar)}

\item{burn.iter}{Number of warmup iterations}

\item{sample.iter}{Number of sampling iterations}
}
\value{
Returns an list with the following elements
\item{samples}{Named list of samples from the posterior, with elements "beta" and "sigma.sq"}
\item{log.marginal}{Estimate of the model's log-marginal-likelihood}
\item{priors}{List of priors used for the model}
}
\description{
Fits a linear model using Gibbs sampling and estimates marginal likelihood as in Chib (1995)
}
\details{
Uses a standard formulation of a linear model from which a Gibbs sampler can be derived. 
Specifically, for a model of the form

\deqn{\beta\sim N(\mu_\beta, \Sigma_\beta)}
\deqn{\sigma^2\sim \Gamma(s_\sigma, r_\sigma)}
\deqn{y = X\beta + \varepsilon}
\deqn{\varepsilon\sim N\left(0, \frac{1}{\sqrt{\sigma^2}} I\right),}

Gibbs sampling can be performed using the conditional distributions

\deqn{\beta|\sigma^2, X, y\sim N(\tilde\mu_\beta, \tilde\Sigma_\beta)}
\deqn{\sigma^2|\beta, X, y\sim \Gamma^{-1}\left(\frac{N}2 + s_\sigma, \frac{e'e}2 + r_\sigma\right),}

where \eqn{N} is the number of observations and

\deqn{\tilde\Sigma_\beta = \frac{X'X}{\sigma^2} + \Sigma_\beta^{-1}}
\deqn{\tilde\mu_\beta = \tilde\Sigma_\beta \left(\frac{X'y}{\sigma^2} + \Sigma_\beta^{-1}\mu_\beta\right)}
\deqn{e = y - X\beta.}
}
\examples{
data(lm.generated)

X <- lm.generated$X
y <- lm.generated$y

gibbs.fit <- gibbs.lm(X, y,
                      priors = list(beta.prior.mean = rep(0, 4),
                                    beta.prior.var = 100 * diag(4),
                                    sigma.sq.prior.shape = 1,
                                    sigma.sq.prior.rate = 1))

print(apply(gibbs.fit$samples$beta, 2, mean)) # [1] 3.181184 1.643960 4.480879 1.213804
print(mean(gibbs.fit$samples$sigma.sq)) # [1] 97.52314
print(gibbs.fit$log.marginal) # [1] -389.001

}
